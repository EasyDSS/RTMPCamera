
#ifndef __EINIFILE_H__
#define __EINIFILE_H__

#ifdef __cplusplus
extern "C" {
#endif

/*
 * 一个简易的INI格式文件封装解封装库
 **/

//;
//; YOU CAN EDIT THIS FILE
//; It may be generated by einifile library
//; Not support write comments to file
//; A sample config file for DVR device
//;
//[System]
//Hardware=DVR_HW_v1.0
//Software=DVR_SW_v1.0
//CameraNum=4
//HasPtz=true
//HasGPS=false
//
//[Camera]
//Video=H264,CBR,2048
//Audio=G711A
//Video=H264,CBR,2048
//Audio=G711A
//Video=H264,VBR,2048
//Audio=G711A
//Video=H264,VBR,2048
//Audio=G711A
//
//[PTZ]
//Baudrate=9600
//Protocol=PolcoD
//Address=
//
//[Log]
//Login=time:09:26:23,desc:183.39.231.137
//Logout=time:09:37:30,desc:183.39.231.137
//Alarm=time:09:52:32,desc:手动报警
//Alarm=time:09:37:30,desc:移动侦测
//


/*
 * 库限制宏定义
 */
#define EINI_NAME_BUF_SIZ			(64)
#define EINI_VALUE_BUF_SIZ			(1024)

/*
 * 句柄
 */
typedef void* eini_handle;

/*
 * 申请句柄
 * @RET: 成功返回句柄, 失败返回NULL
 */
eini_handle eini_alloc(void);

/*
 * 从文件载入配置
 * @h[IN]: 句柄
 * @file[IN]: 文件路径
 * @RET: 成功返回0, 失败返回-1
 */
int eini_load_file(eini_handle h, const char* file);

/*
 * 查询段个数或段内参数个数
 * @h[IN]: 句柄
 * @secidx[IN]: 段索引, 范围:-1,[0,seccnt) 
 *              -1:无效段索引,表示查询段个数 
 *              [0,seccnt):有效段索引,表示查询该段内参数个数
 * @RET: 成功返回段个数或段内参数个数, 失败返回-1
 */
int eini_count(eini_handle h, int secidx);

/*
 * 查询段索引或段内参数索引
 * @h[IN]: 句柄
 * @secidx[IN]: 段索引, 范围:-1,[0,seccnt)
 *              -1:无效段索引,表示查询段索引
 *              [0,seccnt):有效段索引,表示查询该段内的参数索引 
 * @name[IN]: 段名或参数名, 范围:字母+数字+下划线,字母或下划线开头
 *            查询段索引时则是段名, 查询段内参数索引时则是参数名
 * @keyidx[IN]: 同名参数子索引, 范围:-1,[0,MAX) -1:表示同名参数最后一个 仅在查询参数索引时有效
 * @RET: 成功返回段索引或段内参数索引, 失败返回-1
 */
int eini_query(eini_handle h, int secidx, const char* name, int keyidx);

/*
 * 新建段名或在段内新建参数
 * @h[IN]: 句柄
 * @secidx[IN]: 段索引, 范围:[0,seccnt] 有效段索引或段末索引,表示新建值的段位置 
 *              注:若是新建参数,此值不可为段末索引
 * @parmidx[IN]: 参数索引, 范围:-1,[0,parmcnt] 
 *               -1:无效参数索引,表示新建段名 
 *               [0,parmcnt]:有效参数索引或参数末索引,表示新建段内参数位置
 * @name[IN]: 段名或参数名, 范围:字母+数字+下划线,字母或下划线开头
 *            新建段时则是段名, 新建参数时则是参数名
 * @value[IN]: 参数值, 范围:非控制字符集 仅在新建参数时有效
 * @RET: 成功返回0, 失败返回-1
 */
int eini_new(eini_handle h, int secidx, int parmidx, const char* name, const char* value);

/*
 * 获取段名或段内参数
 * @h[IN]: 句柄
 * @secidx[IN]: 段索引, 范围:[0,seccnt) 有效段索引,表示段位置
 * @parmidx[IN]: 参数索引, 范围:-1,[0,parmcnt)
 *               -1:无效参数索引,表示获取段名
 *               [0,parmcnt):有效参数索引,表示获取段内参数
 * @namebuf[OUT]: 段名或参数名内存,大小为EINI_NAME_BUF_SIZ,或NULL
 * @valuebuf[OUT]: 参数值内存,大小为EINI_VALUE_BUF_SIZ,或NULL 仅在获取参数时有效
 * @RET: 成功返回0, 失败返回-1
 */
int eini_get(eini_handle h, int secidx, int parmidx, char* namebuf, char* valuebuf);

/*
 * 设置段名或段内参数
 * @h[IN]: 句柄
 * @secidx[IN]: 段索引, 范围:[0,seccnt) 有效段索引,表示段位置
 * @parmidx[IN]: 参数索引, 范围:-1,[0,parmcnt)
 *               -1:无效参数索引,表示设置段名
 *               [0,parmcnt):有效参数索引,表示设置段内参数
 * @name[IN]: 段名或参数名, 范围:字母+数字+下划线,字母或下划线开头,或NULL(表示保持原名)
 *            设置段名时则是段名, 设置参数时则是参数名
 * @value[IN]: 参数值, 范围:非控制字符集,或NULL(表示保持原值) 仅在设置参数时有效
 * @RET: 成功返回0, 失败返回-1
 */
int eini_set(eini_handle h, int secidx, int parmidx, const char* name, const char* value);

/*
 * 删除段或段内参数
 * @h[IN]: 句柄
 * @secidx[IN]: 段索引, 范围:[0,seccnt) 有效段索引,表示段位置
 * @parmidx[IN]: 参数索引, 范围:-1,[0,parmcnt)
 *               -1:无效参数索引,表示删除该段
 *               [0,parmcnt):有效参数索引,表示删除该段内参数
 * @RET: 成功返回0, 失败返回-1
 */
int eini_delete(eini_handle h, int secidx, int parmidx);

/*
 * 新建段或段内参数 (在尾部追加)
 * @h[IN]: 句柄
 * @sec_key[IN]: 索引路径, 范围:section[.key]
 * @value[IN]: 参数值, 范围:非控制字符集 仅在新建段内参数时有效
 * @RET: 成功返回0, 失败返回-1
 */
int eini_ext_new(eini_handle h, const char* sec_key, const char* value);

/*
 * 获取段内参数值
 * @h[IN]: 句柄
 * @sec_key[IN]: 索引路径, 范围:section.key[.keyidx] (缺省keyidx=-1,表示最后一个同名参数)
 * @valuebuf[OUT]: 参数值内存,大小为EINI_VALUE_BUF_SIZ,或NULL
 * @RET: 成功返回0, 失败返回-1
 */
int eini_ext_get(eini_handle h, const char* sec_key, char* valuebuf);

/*
 * 获取段内参数值scanf
 * @h[IN]: 句柄
 * @sec_key[IN]: 索引路径, 范围:section.key[.keyidx] (缺省keyidx=-1,表示最后一个同名参数)
 * @fmt[IN]: 格式
 * @...[OUT]: 输出列表
 * @RET: 成功返回scanf个数, 失败返回-1
 */
int eini_ext_scanf(eini_handle h, const char* sec_key, const char* fmt, ...);

/*
 * 设置段内参数值
 * @h[IN]: 句柄
 * @sec_key[IN]: 索引路径, 范围:section.key[.keyidx] (缺省keyidx=-1,表示最后一个同名参数)
 * @value[IN]: 参数值, 范围:非控制字符集
 * @RET: 成功返回0, 失败返回-1
 */
int eini_ext_set(eini_handle h, const char* sec_key, const char* value);

/*
 * 设置段内参数值printf
 * @h[IN]: 句柄
 * @sec_key[IN]: 索引路径, 范围:section.key[.keyidx] (缺省keyidx=-1,表示最后一个同名参数)
 * @fmt[IN]: 格式
 * @...[OUT]: 输入列表
 * @RET: 成功返回0, 失败返回-1
 */
int eini_ext_printf(eini_handle h, const char* sec_key, const char* fmt, ...);

/*
 * 删除段或段内参数 (同名参数删除最后一个)
 * @h[IN]: 句柄
 * @sec_key[IN]: 索引路径, 范围:section[.key]
 * @RET: 成功返回0, 失败返回-1
 */
int eini_ext_delete(eini_handle h, const char* sec_key);

/*
 * 将配置存入文件
 * @h[IN]: 句柄
 * @file[IN]: 文件路径
 * @RET: 成功返回0, 失败返回-1
 */
int eini_save_file(eini_handle h, const char* file);

/*
 * 释放句柄
 * @h[IN]: 句柄
 */
void eini_free(eini_handle h);

#ifdef __cplusplus
}
#endif
#endif
